// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

// AttributeMetadataErrorType specifies the a value metadata_error_type attribute.
type AttributeMetadataErrorType int

const (
	_ AttributeMetadataErrorType = iota
	AttributeMetadataErrorTypeMissingType
	AttributeMetadataErrorTypeInvalidType
)

// String returns the string representation of the AttributeMetadataErrorType.
func (av AttributeMetadataErrorType) String() string {
	switch av {
	case AttributeMetadataErrorTypeMissingType:
		return "missing_type"
	case AttributeMetadataErrorTypeInvalidType:
		return "invalid_type"
	}
	return ""
}

// MapAttributeMetadataErrorType is a helper map of string to AttributeMetadataErrorType attribute value.
var MapAttributeMetadataErrorType = map[string]AttributeMetadataErrorType{
	"missing_type": AttributeMetadataErrorTypeMissingType,
	"invalid_type": AttributeMetadataErrorTypeInvalidType,
}

// AttributeType specifies the a value type attribute.
type AttributeType int

const (
	_ AttributeType = iota
	AttributeTypeDigitaloceanSpaces
	AttributeTypeDigitaloceanAPI
	AttributeTypeTailscaleAPI
	AttributeTypeConsulEncryption
	AttributeTypeNomadEncryption
	AttributeTypeDiscordWebhook
	AttributeTypeAuth0AppKeys
)

// String returns the string representation of the AttributeType.
func (av AttributeType) String() string {
	switch av {
	case AttributeTypeDigitaloceanSpaces:
		return "digitalocean.spaces"
	case AttributeTypeDigitaloceanAPI:
		return "digitalocean.api"
	case AttributeTypeTailscaleAPI:
		return "tailscale.api"
	case AttributeTypeConsulEncryption:
		return "consul.encryption"
	case AttributeTypeNomadEncryption:
		return "nomad.encryption"
	case AttributeTypeDiscordWebhook:
		return "discord.webhook"
	case AttributeTypeAuth0AppKeys:
		return "auth0.app_keys"
	}
	return ""
}

// MapAttributeType is a helper map of string to AttributeType attribute value.
var MapAttributeType = map[string]AttributeType{
	"digitalocean.spaces": AttributeTypeDigitaloceanSpaces,
	"digitalocean.api":    AttributeTypeDigitaloceanAPI,
	"tailscale.api":       AttributeTypeTailscaleAPI,
	"consul.encryption":   AttributeTypeConsulEncryption,
	"nomad.encryption":    AttributeTypeNomadEncryption,
	"discord.webhook":     AttributeTypeDiscordWebhook,
	"auth0.app_keys":      AttributeTypeAuth0AppKeys,
}

type metricVaultkvCreatedOn struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vaultkv.created_on metric with initial data.
func (m *metricVaultkvCreatedOn) init() {
	m.data.SetName("vaultkv.created_on")
	m.data.SetDescription("The epoch time in seconds the key was created at.")
	m.data.SetUnit("seconds")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVaultkvCreatedOn) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, keyAttributeValue string, mountAttributeValue string, typeAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("key", keyAttributeValue)
	dp.Attributes().PutStr("mount", mountAttributeValue)
	dp.Attributes().PutStr("type", typeAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVaultkvCreatedOn) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVaultkvCreatedOn) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVaultkvCreatedOn(cfg MetricConfig) metricVaultkvCreatedOn {
	m := metricVaultkvCreatedOn{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVaultkvMetadata struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vaultkv.metadata metric with initial data.
func (m *metricVaultkvMetadata) init() {
	m.data.SetName("vaultkv.metadata")
	m.data.SetDescription("Metadata about the key.")
	m.data.SetUnit("1")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVaultkvMetadata) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, keyAttributeValue string, mountAttributeValue string, versionsAttributeValue string, currentVersionAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("key", keyAttributeValue)
	dp.Attributes().PutStr("mount", mountAttributeValue)
	dp.Attributes().PutStr("versions", versionsAttributeValue)
	dp.Attributes().PutStr("current_version", currentVersionAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVaultkvMetadata) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVaultkvMetadata) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVaultkvMetadata(cfg MetricConfig) metricVaultkvMetadata {
	m := metricVaultkvMetadata{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricVaultkvMetadataError struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills vaultkv.metadata.error metric with initial data.
func (m *metricVaultkvMetadataError) init() {
	m.data.SetName("vaultkv.metadata.error")
	m.data.SetDescription("Errors reported while trying to fetch metrics.")
	m.data.SetUnit("1")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricVaultkvMetadataError) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, keyAttributeValue string, mountAttributeValue string, metadataErrorTypeAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("key", keyAttributeValue)
	dp.Attributes().PutStr("mount", mountAttributeValue)
	dp.Attributes().PutStr("metadata_error_type", metadataErrorTypeAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricVaultkvMetadataError) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricVaultkvMetadataError) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricVaultkvMetadataError(cfg MetricConfig) metricVaultkvMetadataError {
	m := metricVaultkvMetadataError{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	startTime                  pcommon.Timestamp   // start time that will be applied to all recorded data points.
	metricsCapacity            int                 // maximum observed number of metrics per resource.
	metricsBuffer              pmetric.Metrics     // accumulates metrics data before emitting.
	buildInfo                  component.BuildInfo // contains version information
	metricVaultkvCreatedOn     metricVaultkvCreatedOn
	metricVaultkvMetadata      metricVaultkvMetadata
	metricVaultkvMetadataError metricVaultkvMetadataError
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.CreateSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                  pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:              pmetric.NewMetrics(),
		buildInfo:                  settings.BuildInfo,
		metricVaultkvCreatedOn:     newMetricVaultkvCreatedOn(mbc.Metrics.VaultkvCreatedOn),
		metricVaultkvMetadata:      newMetricVaultkvMetadata(mbc.Metrics.VaultkvMetadata),
		metricVaultkvMetadataError: newMetricVaultkvMetadataError(mbc.Metrics.VaultkvMetadataError),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption func(pmetric.ResourceMetrics)

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	}
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(rmo ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/vaultkvreceiver")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricVaultkvCreatedOn.emit(ils.Metrics())
	mb.metricVaultkvMetadata.emit(ils.Metrics())
	mb.metricVaultkvMetadataError.emit(ils.Metrics())

	for _, op := range rmo {
		op(rm)
	}
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(rmo ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(rmo...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordVaultkvCreatedOnDataPoint adds a data point to vaultkv.created_on metric.
func (mb *MetricsBuilder) RecordVaultkvCreatedOnDataPoint(ts pcommon.Timestamp, val int64, keyAttributeValue string, mountAttributeValue string, typeAttributeValue AttributeType) {
	mb.metricVaultkvCreatedOn.recordDataPoint(mb.startTime, ts, val, keyAttributeValue, mountAttributeValue, typeAttributeValue.String())
}

// RecordVaultkvMetadataDataPoint adds a data point to vaultkv.metadata metric.
func (mb *MetricsBuilder) RecordVaultkvMetadataDataPoint(ts pcommon.Timestamp, val int64, keyAttributeValue string, mountAttributeValue string, versionsAttributeValue string, currentVersionAttributeValue string) {
	mb.metricVaultkvMetadata.recordDataPoint(mb.startTime, ts, val, keyAttributeValue, mountAttributeValue, versionsAttributeValue, currentVersionAttributeValue)
}

// RecordVaultkvMetadataErrorDataPoint adds a data point to vaultkv.metadata.error metric.
func (mb *MetricsBuilder) RecordVaultkvMetadataErrorDataPoint(ts pcommon.Timestamp, val int64, keyAttributeValue string, mountAttributeValue string, metadataErrorTypeAttributeValue AttributeMetadataErrorType) {
	mb.metricVaultkvMetadataError.recordDataPoint(mb.startTime, ts, val, keyAttributeValue, mountAttributeValue, metadataErrorTypeAttributeValue.String())
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}
